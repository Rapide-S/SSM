<?xml version="1.0" encoding="UTF-8"?>
<beans default-lazy-init="true"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!--创建一个properties对象，让spring管理 -->
	<util:properties id="cfg" location="classpath:db.properties" />
 
	<!--配置druid对象 从配置文件中读数据 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close" lazy-init="false">
		<property name="DriverClassName" value="#{cfg.jdbcDriver}" />
		<property name="Url" value="#{cfg.jdbcUrl}" />
		<property name="Username" value="#{cfg.jdbcUser}" />
		<property name="Password" value="#{cfg.jdbcPassword}" />
	</bean>
	<!--整合mybatis框架 -来自官网 mybatis/org/spring   将SqlSession等对象的创建交给Spring容器-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 3.2.配置连接池(数据源) ref指向连接池bean对象的id值 -->
		<property name="dataSource" ref="dataSource" />
		<property name="MapperLocations" value="classpath*:mapper/sys/*.xml"/>
	</bean>
	
	<!-- 通过此bean对象扫描指定包下的dao接口，并基于接口创建其实现类对象(代理对象) -->
  <bean id="daoScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
             <property name="BasePackage" value="com.db.**.dao"/>
             <!--扫描接口，系统底层创建实现类 ，自己就不用写实现类的 ，像打印日志，个性化实现时，就自己写实现类-->
             <!-- 当spring容器只有一个sqlSessionFactory时如下配置可以不写 -->
             <property name="SqlSessionFactoryBeanName" value="sqlSessionFactory"/>
   </bean>
	
	<!--扫描实现类，自己写的实现类  ,如果有上面那个的话，就不用这个了-->
	<!-- <context:component-scan base-package="com.db.sys.dao.impl"/> -->
</beans>















